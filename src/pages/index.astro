---
const title = 'まめコミポイントスキャナー';
const description = 'すこやかミルクのシリアルコードをスキャンしてクリップボードにコピーします';
---

<html lang="ja">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href={`${import.meta.env.BASE_URL}favicon.svg`} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content={description} />
    <title>{title}</title>
    
    <!-- OpenCV.js -->
    <script async src={`${import.meta.env.BASE_URL}opencv.js`}></script>
  </head>
  <body>
    <main>
      <header>
        <h1>{title}</h1>
        <p>{description}</p>
      </header>
      
      <div id="scanner-container">
        <div id="camera-section">
          <video id="video" autoplay playsinline></video>
          <canvas id="canvas" style="display: none;"></canvas>
          <div id="scan-overlay">
            <div id="scan-frame"></div>
          </div>
        </div>
        
        <div id="controls">
          <button id="start-camera">カメラを開始</button>
          <button id="capture" disabled>スキャン</button>
          <button id="stop-camera" disabled>停止</button>
        </div>
        
        <div id="result-section">
          <div id="status">カメラの開始ボタンを押してください</div>
          <div id="scanned-code" style="display: none;">
            <h3>スキャン結果:</h3>
            <p id="code-text"></p>
            <button id="copy-button">クリップボードにコピー</button>
          </div>
        </div>
      </div>
    </main>
  </body>
</html>

<script is:inline>
/* eslint-env browser */
/* global cv */

// まめコミポイントスキャナー - メインスクリプト

class MameComicScanner {
  constructor() {
    this.video = document.getElementById('video');
    this.canvas = document.getElementById('canvas');
    this.ctx = this.canvas.getContext('2d');
    this.stream = null;
    this.opencvReady = false;
    
    // ボタン要素
    this.startButton = document.getElementById('start-camera');
    this.captureButton = document.getElementById('capture');
    this.stopButton = document.getElementById('stop-camera');
    this.copyButton = document.getElementById('copy-button');
    
    // ステータス表示
    this.statusElement = document.getElementById('status');
    this.scannedCodeElement = document.getElementById('scanned-code');
    this.codeTextElement = document.getElementById('code-text');
    
    this.initializeEventListeners();
    this.waitForOpenCV();
  }
  
  waitForOpenCV() {
    this.updateStatus('OpenCVライブラリを読み込み中...');
    
    if (typeof window.cv !== 'undefined') {
      this.onOpenCVReady();
    } else {
      // OpenCVが読み込まれるまで待機
      const checkOpenCV = () => {
        if (typeof window.cv !== 'undefined') {
          this.onOpenCVReady();
        } else {
          setTimeout(checkOpenCV, 100);
        }
      };
      setTimeout(checkOpenCV, 100);
    }
  }
  
  onOpenCVReady() {
    this.opencvReady = true;
    this.updateStatus('準備完了: カメラを開始してください');
    console.log('OpenCV.js が正常に読み込まれました');
  }
  
  initializeEventListeners() {
    this.startButton.addEventListener('click', () => this.startCamera());
    this.captureButton.addEventListener('click', () => this.captureAndScan());
    this.stopButton.addEventListener('click', () => this.stopCamera());
    this.copyButton.addEventListener('click', () => this.copyToClipboard());
  }
  
  async startCamera() {
    try {
      this.updateStatus('カメラにアクセス中...');
      
      const constraints = {
        video: {
          facingMode: 'environment', // 背面カメラを優先
          width: { ideal: 1280 },
          height: { ideal: 720 }
        }
      };
      
      this.stream = await navigator.mediaDevices.getUserMedia(constraints);
      this.video.srcObject = this.stream;
      
      this.video.onloadedmetadata = () => {
        this.canvas.width = this.video.videoWidth;
        this.canvas.height = this.video.videoHeight;
        
        this.startButton.disabled = true;
        this.captureButton.disabled = false;
        this.stopButton.disabled = false;
        
        this.updateStatus('カメラが起動しました。シリアルコードを枠内に合わせてスキャンボタンを押してください');
      };
      
    } catch (error) {
      console.error('カメラのアクセスエラー:', error);
      this.updateStatus('カメラにアクセスできませんでした。ブラウザでカメラの許可を与えてください。');
    }
  }
  
  stopCamera() {
    if (this.stream) {
      this.stream.getTracks().forEach(track => track.stop());
      this.stream = null;
    }
    
    this.video.srcObject = null;
    this.startButton.disabled = false;
    this.captureButton.disabled = true;
    this.stopButton.disabled = true;
    
    this.updateStatus('カメラを停止しました');
  }
  
  captureAndScan() {
    if (!this.opencvReady) {
      this.updateStatus('OpenCVがまだ準備できていません');
      return;
    }
    
    try {
      this.updateStatus('画像を処理中...');
      
      // キャンバスに現在のビデオフレームを描画
      this.ctx.drawImage(this.video, 0, 0, this.canvas.width, this.canvas.height);
      
      // OpenCVで画像処理
      const scannedText = this.processImageWithOpenCV();
      
      if (scannedText && scannedText.trim()) {
        this.displayScannedCode(scannedText.trim());
        this.updateStatus('スキャン完了!');
      } else {
        this.updateStatus('シリアルコードが見つかりませんでした。再度お試しください。');
      }
      
    } catch (error) {
      console.error('スキャンエラー:', error);
      this.updateStatus('スキャン中にエラーが発生しました');
    }
  }
  
  processImageWithOpenCV() {
    try {
      // キャンバスからOpenCV Matオブジェクトを作成
      const src = window.cv.imread(this.canvas);
      const gray = new window.cv.Mat();
      const binary = new window.cv.Mat();
      
      // グレースケールに変換
      window.cv.cvtColor(src, gray, window.cv.COLOR_RGBA2GRAY);
      
      // 二値化でテキスト部分を強調
      window.cv.threshold(gray, binary, 0, 255, window.cv.THRESH_BINARY + window.cv.THRESH_OTSU);
      
      // デバッグ用: 処理後の画像をキャンバスに表示
      window.cv.imshow(this.canvas, binary);
      
      // 簡単なOCR処理（実際の実装では外部ライブラリが必要）
      // ここでは仮の実装として、画像の特徴から推定
      const result = this.simpleTextRecognition(binary);
      
      // メモリクリーンアップ
      src.delete();
      gray.delete();
      binary.delete();
      
      return result;
      
    } catch (error) {
      console.error('OpenCV処理エラー:', error);
      return null;
    }
  }
  
  simpleTextRecognition(binaryMat) {
    // 実際のOCR実装では Tesseract.js などを使用
    // ここでは簡易的なシミュレーション
    
    // 画像の中央部分を分析
    const centerRect = {
      x: Math.floor(binaryMat.cols * 0.3),
      y: Math.floor(binaryMat.rows * 0.4),
      width: Math.floor(binaryMat.cols * 0.4),
      height: Math.floor(binaryMat.rows * 0.2)
    };
    
    // 実際の実装では、この部分でより精密な文字認識を行う
    // 現在は開発用のダミーコードを返す
    const dummyCodes = [
      'ABC123DEF456',
      'XYZ789GHI012',
      'MNO345PQR678',
      'STU901VWX234'
    ];
    
    // ランダムにサンプルコードを返す（実際の実装では画像解析結果）
    return dummyCodes[Math.floor(Math.random() * dummyCodes.length)];
  }
  
  displayScannedCode(code) {
    this.codeTextElement.textContent = code;
    this.scannedCodeElement.style.display = 'block';
  }
  
  async copyToClipboard() {
    const code = this.codeTextElement.textContent;
    
    try {
      await navigator.clipboard.writeText(code);
      this.updateStatus('クリップボードにコピーしました!');
      
      // 成功フィードバック
      const originalText = this.copyButton.textContent;
      this.copyButton.textContent = 'コピー完了!';
      this.copyButton.style.background = '#4CAF50';
      
      setTimeout(() => {
        this.copyButton.textContent = originalText;
        this.copyButton.style.background = '#FF9800';
      }, 2000);
      
    } catch (error) {
      console.error('クリップボードへのコピーエラー:', error);
      this.updateStatus('クリップボードへのコピーに失敗しました');
    }
  }
  
  updateStatus(message) {
    this.statusElement.textContent = message;
    console.log('ステータス:', message);
  }
}

// DOM読み込み完了後にアプリケーションを初期化
document.addEventListener('DOMContentLoaded', () => {
  new MameComicScanner();
});
</script>

<style>
  /* リセット */
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }
  
  body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    line-height: 1.6;
    color: #333;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
  }
  
  main {
    max-width: 600px;
    margin: 0 auto;
    padding: 20px;
  }
  
  header {
    text-align: center;
    margin-bottom: 30px;
    color: white;
  }
  
  h1 {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 10px;
    text-shadow: 0 2px 4px rgba(0,0,0,0.3);
  }
  
  header p {
    font-size: 1.1rem;
    opacity: 0.9;
  }
  
  #scanner-container {
    background: white;
    border-radius: 16px;
    padding: 24px;
    box-shadow: 0 10px 30px rgba(0,0,0,0.3);
  }
  
  #camera-section {
    position: relative;
    margin-bottom: 20px;
  }
  
  #video {
    width: 100%;
    max-width: 500px;
    height: auto;
    border-radius: 12px;
    background: #f0f0f0;
  }
  
  #scan-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    pointer-events: none;
  }
  
  #scan-frame {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 200px;
    height: 60px;
    border: 3px solid #4CAF50;
    border-radius: 8px;
    background: rgba(76, 175, 80, 0.1);
    animation: pulse 2s infinite;
  }
  
  @keyframes pulse {
    0% { box-shadow: 0 0 0 0 rgba(76, 175, 80, 0.7); }
    70% { box-shadow: 0 0 0 10px rgba(76, 175, 80, 0); }
    100% { box-shadow: 0 0 0 0 rgba(76, 175, 80, 0); }
  }
  
  #controls {
    display: flex;
    gap: 12px;
    margin-bottom: 20px;
    flex-wrap: wrap;
  }
  
  button {
    flex: 1;
    min-width: 120px;
    padding: 12px 20px;
    border: none;
    border-radius: 8px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  #start-camera {
    background: #4CAF50;
    color: white;
  }
  
  #start-camera:hover:not(:disabled) {
    background: #45a049;
    transform: translateY(-2px);
  }
  
  #capture {
    background: #2196F3;
    color: white;
  }
  
  #capture:hover:not(:disabled) {
    background: #1976D2;
    transform: translateY(-2px);
  }
  
  #stop-camera {
    background: #f44336;
    color: white;
  }
  
  #stop-camera:hover:not(:disabled) {
    background: #da190b;
    transform: translateY(-2px);
  }
  
  button:disabled {
    background: #ccc;
    cursor: not-allowed;
    transform: none;
  }
  
  #result-section {
    text-align: center;
  }
  
  #status {
    padding: 16px;
    border-radius: 8px;
    background: #f5f5f5;
    color: #666;
    font-weight: 500;
  }
  
  #scanned-code {
    padding: 20px;
    background: #e8f5e8;
    border-radius: 8px;
    margin-top: 16px;
  }
  
  #code-text {
    font-family: 'Monaco', 'Menlo', monospace;
    font-size: 1.2rem;
    font-weight: bold;
    color: #2e7d32;
    margin: 12px 0;
    padding: 12px;
    background: white;
    border-radius: 6px;
    word-break: break-all;
  }
  
  #copy-button {
    background: #FF9800;
    color: white;
    margin-top: 12px;
  }
  
  #copy-button:hover {
    background: #F57C00;
    transform: translateY(-2px);
  }
  
  /* モバイル対応 */
  @media (max-width: 480px) {
    main {
      padding: 16px;
    }
    
    h1 {
      font-size: 2rem;
    }
    
    #scanner-container {
      padding: 16px;
    }
    
    #controls {
      flex-direction: column;
    }
    
    button {
      min-width: auto;
    }
  }
</style>
